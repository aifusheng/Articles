/*=====================================================================================================*/ 
最近看了几篇文章，感觉写的挺好的，下面是大概的内容，再加上了一点自己思考的东西。
原文是来自实验楼和博乐在线：
/*=====================================================================================================*/ 
1.学编程为什么这么难？每个新手绝对要知道的那些事
2.Github 365天: 给你一年的时间，你会怎样去提高你的水平
3.悬崖勒马之三年编码的反省
4.最牛B的编码套路

/*=====================================================================================================*/ 
1.学编程为什么这么难？每个新手绝对要知道的那些事

/*-----------------------------------------------------------------------------------------------------*/
----学习编程的需要经历的时期：

	1.手把手辅导的蜜月期（The Hand Holding Honeymoon），这个阶段充满了乐趣，面对看似棘手的问题，那些高质量资源的鼎力相助让你
	轻松取胜。虽然你主要学的是基础语法，但完成的工作会让你很有成就感。

    2.充满迷惑的下滑期（The Cliff of Confusion），在这个阶段你会痛苦地发现，手把手辅导的阶段结束后，事情变得更困难了，实际上你没
	法独立做任何事。在你试图重新振作时，你面对的首要挑战不仅是要反复调试，而且你还不懂怎么问问题。

    3.绝望的迷茫期（The Desert of Despair），这个阶段漫长而又孤独。在这个沙漠（充满困惑迷茫就像身处沙漠）中几乎没有路，每个方向都
	看似正确，但你却总是在绕圈，你极度渴望找到办法逃出生天。警惕“狂燥中出现的海市蜃楼（Mirages of Mania）”，它们就像是沙漠的迷魂曲，
	将引诱你误入歧途。

    4.煎熬的上升期（The Upswing of Awesome），这个阶段里你终于找到了一条路走出沙漠，并且总体清楚了如何创建应用程序。但你的代码仍然
	很封闭，到处都是漏洞，就像纸糊的房子一样摇摇欲坠。你的网站可以运行并且你已经掌握了几种有效的模式，这些都让你的信心大增，而且你的
	朋友们都在称赞你的网站很酷，但实际上你知道底层连自己都不忍直视。你根本不知道该如何写出“可发布”的成熟代码。

/*-----------------------------------------------------------------------------------------------------*/
----出现这种情况的两个主要因素：

因素一：资源密集度

	正如我前面所说，一开始你会感觉有遍地的资源在引导你上手编程。事实也确实如此！
	搜索“如何编程”，你会得到一大堆有用的工具、文章、视频以及自学教程。而且，老实说它们都很棒！从未有过如此多的方法指导人们学习编程。
	不幸的是，后期可供使用的资源太少了。每一个从初学者成长到当前状态的人都能体会这其中的差距之大，相比刚开始入手，当你试图完全依靠
	自己创建工程时，能利用的资源就少得多。

	进入阶段三后需要了解的知识猛然陡增，恶化了上面的问题，这也是为什么我把这个阶段称之为“绝望的迷茫期”。一旦你度过了这个阶段，并且开
	始了解你需要搜索的东西，你就会找到很多资源，还能使用一些技术工具，如专业博客和视频讲座。矛盾的部分仅仅在于明白该问什么问题。

因素二：知识面的广度

	你需要学习的东西越来越多

/*-----------------------------------------------------------------------------------------------------*/
----解决方法：

	I：如何顺利通过手把手辅导的蜜月期（Hand-Holding Honeymoon）

		丰富的可用资源让阶段一充满了乐趣。这些资源能够在接下来的阶段中，很好的培养你的逻辑思维。现在是学习编程的大好时机，
		记住这两个建议，享受编程的乐趣吧！

   		 1.从尝试多种不同的学习资源入手，找到最适合自己的学习方式和最让自己感兴趣的项目类型。最适合你的可能是Khan Academy的
			快速挑战、 Codecademy的在线练习，或者是Chris Pine的书《Learn to Program》和Code School里那些古怪的try Ruby 训
			练。刚开始你要思维开阔，不要理会那些告诉你应该学什么的建议。。。。。。在这个阶段学什么都是一样的。
         2.选择一个，一旦发现它适合自己就要坚持下去。完整学习整个入门教程，你会从中学到写基础脚本和应用需要的所有基础知识。接
			着，就要准备好开始独立地创建工程。

	II：如何顺利通过困惑的下滑期（Cliff of Confusion）

		几乎每个人都要经历这个阶段，因为成为一名开发者的唯一途径就是不断去开发。你可以通过注册一些自学教程（或那些冒充是“完美课
		程”的自学教程）来模拟创建工程，但最终你还是要自己动手，这么做不过是拖延了时间。自学教程能很好地让你从更个性化的例程中得到
		启发，但是在某些情况下你必须脱离过多的辅助，独立解决问题。

		如何过渡到独立地创建工程，下面有三个建议：

   		1.和他人一起工作，哪怕同样是菜鸟。你会惊讶地发现，两双眼睛更容易调试出一个不可能的错误。
 	    2.阅读他人的代码，熟悉好的模式。尽量理解为什么作者这么做。同样的道理，不读书是不会想成为一名小说家的，对吧？我将在下一篇文
			章里集中讨论这个问题，但现在，请仔细注意其他人对任何小问题或工程提出的解决方案。
  		3.从小事做起，不断尝试。对于将来，你应该想过做一些有趣的大工程，但你也必须适应调试的过程，搜索一些带有小型挑战的学习资源。经
			验是无可替代的。

	III：如何顺利通过绝望的困惑期（Desert of Despair）

		一旦适应了调试过程，最令你头疼的问题就是难以获取所需知识，以及学习所有这些知识必须付出的代价…简直就像处于令人绝望的沙漠里。
		这种情况下，你真正需要的是一条有效的前进路线。而Mirages of Mania代表那些吸引你的捷径、诱惑你冒险的新世界和速成计划，它们最
		终只会浪费你的时间。

		因此，要逃离这个沙漠的关键在于：

  		 1.拥有一个强烈的目标想去实现，否则，什么有趣但没用的东西都学的话，最终不过瞎忙活一场。如果你在学习之外还有充裕的时间，
			请忽略这一条。。。。。。
   		 2.找到一条有效的路径能直达你设定的目标，并且要验证其可行性。你必须深入思考“这个方法到底能不能帮我实现目标？”，而不是光
			看那些课程网站或书皮上打出的营销口号和看似真诚的笑脸。
  		 3.专注，避免分心。因为你如果是个对学习编程很有兴趣的人，那你肯定也会对所有美妙的事情感兴趣。当编程遇到了困难，你需要进一步解
			决这个问题，而不是另起炉灶。

		如果能确定一条路并坚持走下去，你最终一定会进入到下一个阶段，而不是花费了数月或数年，最终只是徒劳。


	IV：如何顺利通过煎熬的上升期（Upswing of Awesome）

		这个阶段是最棘手的过渡阶段之一。尽管你能开发出应用程序，但你实际上想成为一名web开发人员。通过这个阶段并找到工作，你需要做三件事情：

  		1. 为编程寻找最佳实践，并效仿。你需要理解一个普通方案和最佳方案之间的差别。自己一味闷头钻研，远远比不上别人在真实工作环境下写出的产品
			级代码，而最佳实践样例很好地体现了这其中的差距。
  		2. 检验你的假设。因为你可能回避了一些自己知识体系中的漏洞，甚至你自己都不知道有这些漏洞的存在。你需要检查并修复这些漏洞。
  		3. 正确对待那些并不吸引人的技能。尽管它们很少被强调，但是你要过渡到一个专业环境，它们还是相当重要的。这些技能包括测试、数据建模、架
			构和部署，我们很容易忽略它们，但它们都是优秀开发的基础。

要做到上面这些并通过最后阶段，关键是要不断获得他人的反馈。完全自学或许富有成效，但难以写出易读、模块化以及可维护的代码，这就使自学者在职业环境中
没那么有吸引力。你需要和和那些会怀疑你假设的人们一起工作，他们会提出尖锐的后续问题，并迫使你对自己的知识体系进行查缺补漏。

/*=====================================================================================================*/ 
2.Github 365天: 给你一年的时间，你会怎样去提高你的水平

/*-----------------------------------------------------------------------------------------------------*/
----说说标题

尽管一直在Github上连击看上去似乎是没有多大必要的，但是人总得有点追求。如果正是漫无目的，却又想着提高技术的同时，
为什么不去试试？毕竟技术非常好、不需要太多练习的人只是少数，似乎这样的人是不存在的。大多数的人都是经过练习之后，
才会达到别人口中的“技术好”。

这让我想起了充斥着各种气味的知乎上的一些问题，在一些智商被完虐的话题里，无一不是因为那些人学得比别人早——哪来的天才？
所谓的天才，应该是未来的智能生命一般，一出生什么都知道。如果并非如此，那只是说明他练习到位了。

练习不到位便意味着，即使你练习的时候是一万小时的两倍，那也是无济于事的。如果你学得比别人晚，在很长的一段时间里(可能直到进
棺材)输给别人是必然的——落后就要挨打。就好像我等毕业于一所二本垫底的学校里，如果在过去我一直保持着和别人(各种重点)一样的学
习速度，那么我只能一直是Loser。

需要注意的是，对你来说考上二本很难，并不是因为你比别人笨。教育资源分配不均的问题，在某种程度上导致了新的阶级制度的出现。如我的
首页说的那样: THE ONLY FAIR IS NOT FAIR——唯一公平的是它是不公平的。我们可以做的还有很多——CREATE & SHARE。真正的不幸是，因为营
养不良导致的教育问题。

于是在想明白了很多事的时候起，便有了Re-Practise这样的计划，而365天只是中间的一个产物。

/*-----------------------------------------------------------------------------------------------------*/
----重构

如果你懂得如何写出高可读的代码，那么我想你是不需要这个的，但是这意味着你花了更多的时候在思考上了。当谈论重构的时候，让我想起
了TDD(测试驱动开发)。即使不是TDD，那么如果你写着测试，那也是可以重构的。(之前写过一些利用Intellij IDEA重构的文章：提炼函数、
以查询取代临时变量、重构与Intellij Idea初探、内联函数)

在各种各样的文章里，我们看到过一些相关的内容，最好的参考莫过于《重构》一书。最基础不过的原则便是函数名，取名字很难，取别人能读
懂的名字更难。其他的便有诸如长函数、过大的类、重复代码等等。在我有限的面试别人的经历里，这些问题都是最常见的。

/*-----------------------------------------------------------------------------------------------------*/
----测试

而如果没有测试，其他都是扯淡。写好测试很难，写个测试算是一件容易的事。只是有些容易我们会为了测试而测试。
在我写EchoesWorks和Lan的过程中，我尽量去保证足够高的测试覆盖率。
从测试开始的TDD，会保证方法是可测的。从功能到测试则可以提供工作次效率，但是只会让测试成为测试，而不是代码的一部分。
测试是代码的最后一公里。所以，尽可能的为你的Github上的项目添加测试。
/*-----------------------------------------------------------------------------------------------------*/
----编码的过程

		初到TW时，Pair时候总会有人教我如何开始编码，这应该也是一项基础的能力。结合日常，重新演绎一下这个过程：
        1.有一个可衡量、可实现、过程可测的目标
        2.Tasking (即对要实现的目标过程进行分解)
        3.一步步实现 (如TDD)
        4.实现目标


在我们实际工作中也是如此，接到一个任务，然后分解，一步步完成。不过实现会稍微复杂一些，因为事务总会有抢占和优先级的。

/*-----------------------------------------------------------------------------------------------------*/
----技术与框架设计

在上上一篇博客中《After 500: 写了第500篇博客，然后呢?》也深刻地讨论了下这个问题，技术向来都是后发者优势。对于技术人员来说，
也是如此，后发者占据很大的优势。

如果我们只是单纯地把我们的关注点仅仅放置于技术上，那么我们就不具有任何的优势。而依赖于我们的编程经验，我们可以在特定的时候
创造一些框架。而架构的设计本身就是一件有意思的事，大抵是因为程序员都喜欢创造。(ps:之前曾经写过这样一篇文章，《对不起，我并不
热爱编程，我只喜欢创造》)

创造是一种知识的再掌握过程。

组合相比于创造过程是一个更有挑战性的过程，我们需要在这过程去设计胶水来粘合这些代码，并在最终可以让他工作。这好比是我们在平时
接触到的任务划分，每个人负责相应的模块，最后整合。

而练习是要分成不同的几个步骤，不仅仅局限于技术：

       1. 编码

       2. 架构

       3. 设计
/*-----------------------------------------------------------------------------------------------------*/

/*=====================================================================================================*/ 
3.最牛B的编码套路

/*-----------------------------------------------------------------------------------------------------*/
最近，我大量阅读了Steve Yegge的文章。其中有一篇叫“Practicing Programming”（练习编程），写成于2005年，读后令我惊讶不已：

    与你所相信的恰恰相反，单纯地每天埋头于工作并不能算是真正意义上的锻炼——参加会议并不能锻炼你的人际交往能力；回复邮件并
不能提高你的打字水平。你必须定期留出时间，集中锻炼，这样才能把事情做得更好。

    我认识很多杰出的程序员——这是在亚马逊工作最好的额外“福利”之一。如果仔细观察他们，你会发现他们时时都在锻炼。他们已经很优秀了，
但他们仍然不忘锻炼。他们锻炼的方法林林总总，而我在这篇文章中只会介绍其中的几种。

    据我了解，这些杰出程序员之所以如此成功，就是因为他们一直在锻炼。完美的身材要靠定期的锻炼才能获得，而且必须坚持锻炼才能保持，
否则身材就会走形。对于编程和软件工程来说，道理是一样的。

这是一个重要的区别——我每天都开车去上班，但我的驾驶水平远远不如专业车手；类似的情况，天天编程可能并不足以使你成为一名专业的程序员。
那么，什么才能把一个普通人变成一名专业车手或者专业程序员呢？你需要锻炼什么呢？

爱立信提出，重要的并不是经验本身，而是“努力的学习”，也就是要不断地挑战自身能力之外的东西。一些狂热的爱好者花费了大量的时间去下棋、
打高尔夫球或者玩乐器，但他们可能始终停留在业余水平上，而一个训练有素的学生却可以在相对较短的时间里超越他们，原因就在这里。值得注
意的是，在提高水平方面，花费在下棋上的大量时间（即使参加各种比赛）似乎还是比不过专门的训练来得更为有效。训练的主要价值在于发现弱
点，并有针对性地进行提高。

“努力的学习”意味着，要常常去处理那些刚好在你能力极限上的问题，也就是那些对你来说有很大可能失败的事情。如果不经历一些失败的话，你可
能就不会成长。你必须不断地挑战自我，超越自己的极限。

那样的挑战有时会在工作中碰到，但也未必。将锻炼从职业工作中分离出来，这在编程领域常被人称为“编码套路”（Code Kata）
/*-----------------------------------------------------------------------------------------------------*/



/*=====================================================================================================*/ 
4.悬崖勒马之三年编码的反省
/*-----------------------------------------------------------------------------------------------------*/
从12年初入职场到现在已经三年有余，从当时技术小白到现在的勉强小手，显然这样的结果是我不曾希望的。步入职场之初，
暗下决心，三年时间里希望能在工作技术上有一个质的变化。奈何事实却是时间消磨了斗志，抹灭了激情，梦想被现实打败，
而且是一败涂地。三年的时间里，回首思考过去的计划安排，却发现花在钻研技术上的时间其实并不少的，为何却没有比较
深入的提高呢？或者说，为什么感觉不到进步呢？在写这个之前，自己也冥思苦想了好久，寻找根本原因，不论客观的主观的，
最后总结于如下几个方面：

/*-----------------------------------------------------------------------------------------------------*/
----于自制力

我想这应该是让我这几年停滞不前，甚至有些后退的根本原因之所在吧。虽然能勉强应付工作了，虽然计划赶不上变化了，
虽然明日复明日，明日何其多，虽然...太多的诱惑，太多的借口让自己放松自己，任由计划放空，甚至有些放纵自己。当
一次此松懈的有恃无恐，当舒适的感觉已养成习了，当计划一而再的变成了可有可无的时候，怎么可能还会有翘首企盼的进
步和突破呢？温水煮青蛙的故事，谁又不懂呢？劳逸结合固然是提高效率的决定因素，但是当原本计划落空导致严重的压迫
感的时候，因松懈而带来内心强烈的自责感的时候，行动和回报距离过于遥远甚至可能没有回报的时候，无一不深深的牵绊
着下一步计划的实施和泯灭钻研的热情。


自制力这个时候显然是软弱无能的，当你这刻吃下了一块炸鸡，你能坚持明天一直吃素吗？当你今天一直不学习，真的相信
明天会补回来吗？别骗自己了。遇到事情或者遭遇问题，最好立马实施去做去解决，而不是过多的考虑和依赖如何，在哪里，
何时去做。当一切准备就绪的时候，可能又没有做的心情了。不做就是停滞不前，做了即使做错，也有经验的积累，而且也能
提高自己的自制力和执行力。遇事不存事，立马制定计划，开始实施。套用别人的话，自制力是最优秀的品德。

/*-----------------------------------------------------------------------------------------------------*/
----于侧重点

翻开过于的一些计划安排，发现自己有点饿坏了的感觉，看到了东西就抓过来吃，不管能不能吃，是什么味道都塞进嘴里，
还没来得及咀嚼消化就吞进肚里然后排泄出来，占了空间就没能吸收到必须的营养。回头想这几年花时间学的一些技术知识：
c/c++，shell ，kernel, Qt，正则 python，java,还包括一些网络开源的库等等，无一不是这样。随着时间的推移以及工
作的不相关等因素，现在能熟练使用的也只是目前工作需要的，其他都忘记的十之八九了，而工作中需要的去了解，去深入
钻研的却无暇顾及，导致工作上有时问题不能完美的解决或者无法解决。

这个显然也是导致营养不良的一个严重问题。一把抓式学习显然对我们钻研技术的来说不是一件好事。于时间，于精力都
是不被允许的，懂的多固然是一件好事，但是我想这应该是立足于熟练自己擅长的基础之上的还有足够精力和兴趣的，如
果本身的都没有抓好，又出四处乱抓一把，虚胖显然是很不健康的，到头来只会越陷越深，失去方向。写到这里，突然想
起前段时间公司培训，讲到时间管理坐标系的问题（紧急为x轴和重要为y轴，正为紧急 重要，负为不紧急，不重要）,将
自己列入其中，才发现自己一直在错误的象限中(不紧急不重要和紧急重要)忙的团团转，却忘记了最应该花大量时间去的
管理的象限(重要不紧急)的事情。

/*-----------------------------------------------------------------------------------------------------*/
----于难易度

前段时间看一位牛人的博客，里面谈到人对外部世界的认知区域。感觉对于程序员来说挺有用，也正好适合我想表达的想法
。分享一下，心理学认为人对于外部世界的认识可以分为三个区域：舒适区（comfort zone）、学习区（learning zone）、
恐慌区（panic zone）。比如我们看一本书，如果这本书所说的内容都是我们熟悉的，完全符合我们的人生观和世界观，
那么这本书就在我们的舒适区内，但如果这本书说的内容和我们的人生观和世界观不符，但是我们思考后之后仍能接收理
解的，那么这本书就在我们的学习区内。

如果这本书的内容在我们阅读的时候很难理解和吸收，那么就在我们的恐慌区内。心理学研究说，只有在“学习区”内做事，
人才会进步。纵观我这几年的额外学习的重点知识都不是在“学习区”内的，对于基础Qt、python、java语法等这些几乎都
是趋于“舒适区”内的，在某种意义上的重复劳动。而kerne、某些开源网络框架等趋于“恐慌区”内的，也只是短暂时间的逼
迫接受。而这些却是我耗费时间精力最多的两个区域，这样又如何进步呢。

/*-----------------------------------------------------------------------------------------------------*/
写到这里我想要表达的都总结的差不多了。反省总是有所收获的，或茁壮成长，或自甘堕落，在这里，一切的言语在行动面前
都是苍白的。希望在下一个阶段性的回望时，能给自己交一份真正意义答卷。最后套用一位牛人的的话送给自己：

“写到这里，我想有很多人都问过我，程序要怎么写才能写得好，或者说设计模式要怎么写，之类的问题。如果把学习编程
话费的精神代价作为标准的话，捷径是没有的。但是如果仅仅把时间作为标准的话，捷径显然是有的。怎么才能加速你学
习的过程呢？答案就是，先写再看书。

对于像编译原理这种略微高深的知识，总要自己写过几遍，吃一些苦头，才能知道为什么书里非要把算法那么设计，结构那
么安排。对于像设计模式这种需要大量经验才可以领悟到的知识，如果你从来没有独立写过一个上万行的程序，你觉得你能
理解设计模式在讲什么吗？我觉得这个时候能做的就也就是背下来，理解什么的都是扯淡。诸如此类，学习程序，如果要加
速那个过程，肯定要花大量的时间写代码。


当你把项目做的越大、越复杂、算法越扭曲、界面越华丽、尺寸已经大到你觉得不学习新的方法论就肯定会让代码失控的时
候，这个时候你来看设计模式的书，保证是每看到一个模式都觉得人家说到你心坎里去了。那你不仅可以迅速理解，而且以
后还可以不由自主的想起来使用它”


在程序员的生涯里面，最重要的就是保持对编程的热情，不要被生活的琐事所磨灭。其次是要给自己不断地创造一些足够困
难但是又有办法完成的挑战，这样才可以总是让自己保持着一个快速前进的状态。”

/*=====================================================================================================*/ 
个人总结：
/*=====================================================================================================*/ 
1.人在一段时间内，不要设定太多的目标，精力容易分散，最终可能一事无成。学习一样东西或技术时，得专心，认准目标。

2.学习任何技术，想要学的好，打好基础非常重要，切不可贪多太快。起初你可以大概学习一下基础，正所谓万丈高楼平地起，
然后尝试着做一些又去小的有趣的东西，但是切不可迷恋，这个时候你可以再一次看一遍基础的东西，接着尝试做一些难一点的东西。
在不断失败，不断成功中学习，成长。选择一个，一旦发现它适合自己就要坚持下去

3.拥有一个强烈的目标想去实现，等到你实现时你将发现你自己有很大的进步，否则，什么有趣但没用的东西都学的话，最终有可能不过瞎忙活一场。

4.专注，避免分心。因为你如果是个对学习编程很有兴趣的人，那你肯定也会对所有美妙的事情感兴趣。当编程遇到了困难，你需要进一步解
决这个问题，而不是另起炉灶。

5.定期留出时间，集中锻炼，这样才能把事情做得更好。

6.杰出程序员之所以如此成功，就是因为他们一直在锻炼。完美的身材要靠定期的锻炼才能获得，而且必须坚持锻炼才能保持，
否则身材就会走形。对于编程和软件工程来说，道理是一样的。

7.重要的并不是经验本身，而是“努力的学习”，也就是要不断地挑战自身能力之外的东西。一些狂热的爱好者花费了大量的时间去下棋、
打高尔夫球或者玩乐器，但他们可能始终停留在业余水平上，而一个训练有素的学生却可以在相对较短的时间里超越他们，原因就在这里。值得注
意的是，在提高水平方面，花费在下棋上的大量时间（即使参加各种比赛）似乎还是比不过专门的训练来得更为有效。

训练的主要价值在于发现弱点，并有针对性地进行提高。

“努力的学习”意味着，要常常去处理那些刚好在你能力极限上的问题，也就是那些对你来说有很大可能失败的事情。如果不经历一些失败的话，你可
能就不会成长。你必须不断地挑战自我，超越自己的极限。

8.自制力，意志力，执行力
人的身体是非常聪明的，当你一而再，再而三的放纵享受自己，你就容易养成这个习惯。
虽然计划赶不上变化了，
虽然明日复明日，明日何其多，
虽然...太多的诱惑，太多的借口让自己放松自己，任由计划放空，甚至有些放纵自己。
当一次此松懈的有恃无恐，当舒适的感觉已养成习了，当计划一而再的变成了可有可无的时候，
怎么可能还会有翘首企盼的进步和突破呢？温水煮青蛙的故事，谁又不懂呢？劳逸结合固然是提高效率的决定因素，
但是当原本计划落空导致严重的压迫感的时候，因松懈而带来内心强烈的自责感的时候，行动和回报距离过于遥远
甚至可能没有回报的时候，无一不深深的牵绊着下一步计划的实施和泯灭钻研的热情。

当你今天一直不学习，真的相信明天会补回来吗？别骗自己了。

这个时候就需要自制力和意志力，其实最根本的原因还是缺乏能够让你奋勇前进的动机。
如果你有明确的目标的话，我相信你会不断的鞭策着自己，让你每天充满战斗的精神。

遇到事情或者遭遇问题，最好立马实施去做去解决，而不是过多的考虑和依赖如何，在哪里，
何时去做。当一切准备就绪的时候，可能又没有做的心情了。不做就是停滞不前，做了即使做错，
也有经验的积累，而且也能提高自己的自制力和执行力。遇事不存事，立马制定计划，开始实施。


9.抓住重点
一把抓式学习显然对我们钻研技术的来说不是一件好事。于时间，于精力都
是不被允许的，懂的多固然是一件好事，但是我想这应该是立足于熟练自己擅长的基础之上的还有足够精力和兴趣的，
如果本身的都没有抓好，又出四处乱抓一把，虚胖显然是很不健康的，到头来只会越陷越深，失去方向。

10.三个区域：舒适区（comfort zone）、学习区（learning zone）、恐慌区（panic zone）。
只有在“学习区”内做事，人才会进步。

11.任何时候当你有想法或问题时，你应该立即努力去尝试解决，或者立即记录下来，等待有时间的时候尝试去解决。

12.为了让自己不断处于学习之中，当你有空余时间的时候，可以尝试着学习一样新的东西，给自己一段时间，你会发现
自己更多的可能和兴趣爱好。
/*=====================================================================================================*/ 
